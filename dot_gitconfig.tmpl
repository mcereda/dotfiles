################################################################################
## ~/.gitconfig
##
## Global git configuration file. Settings in here override the system's ones,
## and are in turn overridden by the repositories' local ones.
## Check the resolved configuration in full and its origins with the following:
## `git config --list --show-origin`.
##
## Sources:
## - https://git-scm.com/docs/git-config
## - https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration
################################################################################

{{- /* Check the commented content of the result of `chezmoi diff` */}}
{{-    $debug := false }}

{{- /*
     * Compute or set default values for this file. Add yours here.
     * I just find nice to have them handy here and reference them later, and
     * setting them one per line feels more readable than a convoluted,
     * all-in-one dict definition (I tried).
     */}}

{{-    $defaults := dict }}
{{-    $_ := set $defaults "data" dict }}

{{-    if $debug }}
{{       "defaults:" | comment "# " }}
{{       $defaults | toYaml | indent 4 | comment "# " }}
{{-    end }}

{{- /*
     * Start from the defaults and overwrite them with the existing
     * configuration from the configuration file.
     */}}

{{-    $config := $defaults }}

{{-    $configFromFile := include $.chezmoi.configFile | fromYaml }}
{{-    $_ := mustMergeOverwrite $config $configFromFile }}

{{-    if $debug }}
{{       "merged with config file" | comment "# " }}
{{       "config:" | comment "# " }}
{{       $config | toYaml | indent 4 | comment "# " }}
{{-    end }}

{{-    $email := dig "email" "" . }}
{{-    $name := dig "name" "" . }}

[alias]
	branch-get-default = "!f() { \
		git remote show origin \
		| awk '/HEAD branch/ {print $NF}' \
	;} && f"
	branch-get-gone = "!f() { \
		git fetch -p && \
		git branch -vv \
		| awk '/origin/&&/gone/{print $1}' \
	;} && f"
	branch-prune-gone = "!f() { \
		git branch-get-gone \
		| xargs \
			git branch -D \
	;} && f"
	checkout-default-branch = "!f() { \
		git checkout $(git branch-get-default) \
	;} && f"
	config-show-final = "!f() { \
		git config --list \
		| awk -F '=' '{print $1}' \
		| sort -u \
		| xargs -I {} \
			sh -c 'printf \"{}=\" && git config --get {}' \
	;} && f"
	pull-from-all-remotes = "!f() { \
		git remote show \
		| xargs -I{} \
			git pull {} ${1:-$(git branch --show-current)} \
	;} && f"
	pull-from-reachable-remotes = "!f() { \
		git remote-show-reachable \
		| xargs -I{} \
			git pull {} ${1:-$(git branch --show-current)} \
	;} && f"
	push-to-all-remotes = "!f() { \
		git remote show \
		| xargs -I{} \
			git push {} ${1:-$(git branch --show-current)} \
	;} && f"
	push-to-reachable-remotes = "!f() { \
		git remote-show-reachable \
		| xargs -I{} \
			git push {} ${1:-$(git branch --show-current)} \
	;} && f"
	remote-show-reachable = "!f() { \
		git remote show \
		| xargs -I{} \
			sh -c \"timeout 3 git ls-remote -hq {} HEAD >/dev/null 2>&1 && echo {} || true\" \
	;} && f"
	remote-show-unique = "!f() { \
		git remote -v \
		| sort -k2 -u \
		| awk '{print $1}' \
		| sort -u \
	;} && f"
	statis = status
	statsu = status
	switch-default-branch = "!f() { \
		git switch $(git branch-get-default) \
	;} && f"
	top-level = "rev-parse --show-toplevel"
[core]
	# 'input' on unix, 'true' on windows
	# 'false' only if you know what you are doing
	autocrlf = {{ ternary "true" "input" (eq .chezmoi.os "windows") }}
[diff]
	wsErrorHighlight = all
[init]
	defaultBranch = main
[pull]
	rebase = false
[submodule]
	recurse = true

{{-    if or $email $name }}
[user]
{{       if $email }}	email = {{ .email }} {{- end }}
{{       if $name }}	name = {{ .name }}   {{- end }}
{{-    end }}

{{-    if and
         (lookPath "git-lfs")
         (eq (output "git" "config" "--system" "--get" "--default" "NOT-SET" "filter.lfs.clean" | trim) "NOT-SET") }}

# Enable LFS.
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true

{{-    end }}

########################################
# Host-specific additions and overrides.
########################################

{{- /*
     * Load pieces of configuration from hosts-specific configuration files,
     * should any such file exist.
     * Every file's content will be templated, and the result will be added,
     * in the order each appears in the list.
     */}}

{{-    $hostGitconfigFiles := list
         (joinPath $config.data.hostDir ".gitconfig.tmpl")
         (joinPath $config.data.hostDir ".gitconfig") }}

{{-    range $f := $hostGitconfigFiles }}

{{-      if $debug }}
{{         cat "looping on file" $f | comment "# " }}
{{-      end }}

{{-      if stat (joinPath $.chezmoi.sourceDir $f) }}

{{         includeTemplate $f . }}

{{-      end }}

{{-    end }}

{{- /*
     * It is useless to hash the default file's names, as this method is not
     * a real encryption and doing it just makes identifying the right file
     * more difficult. Just add your file path to this list eventually.
     */}}

{{-    $hostEncryptedGitconfigFiles := list
         (joinPath $config.data.encryptedHostDir (print ".gitconfig.tmpl" (dig "age" "suffix" ".age" $config)))
         (joinPath $config.data.encryptedHostDir (print ".gitconfig.tmpl" (dig "gpg" "suffix" ".asc" $config)))
         (joinPath $config.data.encryptedHostDir (print ".gitconfig" (dig "age" "suffix" ".age" $config)))
         (joinPath $config.data.encryptedHostDir (print ".gitconfig" (dig "gpg" "suffix" ".asc" $config))) }}

{{-    range $f := $hostEncryptedGitconfigFiles }}

{{-      if $debug }}
{{         cat "looping on file" $f | comment "# " }}
{{-      end }}

{{-      if stat (joinPath $.chezmoi.sourceDir $f) }}

{{- /*
     *     For chezmoi to be able to decrypt any encrypted file which content
     *     needs to be loaded, it requires the 'encryption' setting to be
     *     present in the configuration file _before_ the run.
     */}}

{{-        if hasKey $config "encryption" }}

{{           includeTemplate $f . | decrypt }}

{{-        end }}

{{-      end }}

{{-    end }}
