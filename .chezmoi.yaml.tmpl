################################################################################
## ~/.config/chezmoi/.chezmoi.yaml
##
## Chezmoi configuration file in one of the supported formats (JSON, JSONC,
## TOML, and YAML).
## If multiple configuration file formats are present, chezmoi will report an
## error.
##
## Sources:
## - https://www.chezmoi.io/reference/configuration-file/
################################################################################

{{- /* Check the commented contents of the resulting file after init. */}}
{{-    $debug := false }}

{{- /*
     * Update the configuration file building upon what is already there.
     * The easiest way to do this is not to fiddle with the direct assignments,
     * but to create a new dict instead, fill it with the current settings, and
     * just print the contents of such dict at the end.
     */}}

{{- /*
     * Compute or set default values for this file. Add yours here.
     * I just find nice to have them handy here and reference them later, and
     * setting them one per line feels more readable than a convoluted,
     * all-in-one dict definition (I tried).
     */}}

{{-    $defaults := dict }}
{{-    $_ := set $defaults "data" dict }}
{{-    $_ := set $defaults.data "hashedHostname" (adler32sum (sha256sum $.chezmoi.hostname)) }}
{{-    $_ := set $defaults.data "hostsDir" ".hosts" }}
{{-    $_ := set $defaults.data "hostDir" (joinPath $defaults.data.hostsDir $.chezmoi.hostname) }}
{{-    $_ := set $defaults.data "encryptedHostDir" (joinPath $defaults.data.hostsDir $defaults.data.hashedHostname) }}
{{-    $_ := set $defaults "encryption" "gpg" }}

{{-    if $debug }}
{{       "defaults:" | comment "# " }}
{{       $defaults | toYaml | indent 4 | comment "# " }}
{{-    end }}

{{- /*
     * Start from the defaults and overwrite them with the existing
     * configuration from the configuration file, if it exists.
     */}}

{{-    $config := $defaults }}

{{-    if stat $.chezmoi.configFile }}
{{-      $configFromFile := include $.chezmoi.configFile | fromYaml }}
{{-      $_ := mustMergeOverwrite $config $configFromFile }}
{{-    end }}

{{-    if $debug }}
{{       "merged with config file" | comment "# " }}
{{       "config:" | comment "# " }}
{{       $config | toYaml | indent 4 | comment "# " }}
{{-    end }}


{{- /*
     * Host-specific additions and overrides.
     * --------------------------------------
     */}}


{{- /*
     * Load pieces of configuration from hosts-specific configuration files,
     * should any such file exist.
     * Every file's content will overwrite the existing settings in the order
     * each appears in the list, with the next file overwriting values in the
     * previous one.
     */}}

{{-    $hostConfigFiles := list
         (joinPath $config.data.hostDir ".chezmoi.yaml.tmpl")
         (joinPath $config.data.hostDir ".chezmoi.yaml") }}

{{-    range $f := $hostConfigFiles }}

{{-      if $debug }}
{{         cat "looping on file" $f | comment "# " }}
{{-      end }}

{{-      if stat (joinPath $.chezmoi.sourceDir $f) }}

{{-        $hostConfig := includeTemplate $f . | fromYaml }}
{{-        $_ := mustMergeOverwrite $config $hostConfig }}

{{-      end }}

{{-    end }}

{{-    if $debug }}
{{       "merged with the host's specific config files" | comment "# " }}
{{       "config:" | comment "# " }}
{{       $config | toYaml | indent 4 | comment "# " }}
{{-    end }}

{{- /*
     * It is useless to hash the default file's names, as this method is not
     * a real encryption and doing it just makes identifying the right file
     * more difficult. Just add your file path to this list eventually.
     */}}

{{-    $hostEncryptedConfigFiles := list
         (joinPath $config.data.encryptedHostDir (print ".chezmoi.yaml.tmpl" (dig "age" "suffix" ".age" $config)))
         (joinPath $config.data.encryptedHostDir (print ".chezmoi.yaml.tmpl" (dig "gpg" "suffix" ".asc" $config)))
         (joinPath $config.data.encryptedHostDir (print ".chezmoi.yaml" (dig "age" "suffix" ".age" $config)))
         (joinPath $config.data.encryptedHostDir (print ".chezmoi.yaml" (dig "gpg" "suffix" ".asc" $config))) }}

{{-    range $f := $hostEncryptedConfigFiles }}

{{-      if $debug }}
{{         cat "looping on file" $f | comment "# " }}
{{-      end }}

{{-      if stat (joinPath $.chezmoi.sourceDir $f) }}

{{- /*
     *     For chezmoi to be able to decrypt any encrypted file which content
     *     needs to be loaded, it requires the 'encryption' setting to be
     *     present in the configuration file _before_ the run.
     *     I cannot currently find a way to automatically re-run the init step,
     *     as there is no 'output'-like init function. The easiest yet currently
     *     the best solution I could find is to write the config file in the
     *     current state and leverage the init functions to notify the user to
     *     re-run the 'init' step.
     */}}

{{-        if and
             (stat $.chezmoi.configFile)
             (hasKey $config "encryption") }}

{{-          $hostConfig := includeTemplate $f . | decrypt | fromYaml }}
{{-          $_ := mustMergeOverwrite $config $hostConfig }}

{{-        else }}

{{-          writeToStdout
               "Encrypted files found.\n"
               "Required initial encryption setting set to its default value.\n"
               "Please re-run `chezmoi init` to include them.\n" }}

{{-        end }}

{{-      end }}

{{-    end }}

{{-    if $debug }}
{{       "merged with the host's specific encrypted config files" | comment "# " }}
{{       "config:" | comment "# " }}
{{       $config | toYaml | indent 4 | comment "# " }}
{{-    end }}

{{- /*
     * Write out the resulting configuration merge.
     * Clean up the configuration root from what needs to stay in the 'data' key.
     */}}

{{-    range $k := keys $config.data }}
{{-      $config = omit $config $k }}
{{-    end }}

{{     $config | toYaml }}
