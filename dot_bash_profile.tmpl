################################################################################
## ~/.bash_profile
##
## There are 3 different types of shells in Bash:
## - the login shell;
## - the interactive non-login shell;
## - the non-interactive non-login shell.
## Login shells read /etc/profile, and only the first one found between
## '~/.bash_profile', '~/.bash_login' and '~/.profile' in this order.
## Interactive non-login shells read /etc/bashrc and ~/.bashrc.
## Non-interactive non-login shell read the file which name is the value of the
## '$BASH_ENV' variable.
## In this setup, ~/.bash_profile sources ~/.bashrc, which means that all
## changes made here will also take effect in a login shell.
##
## This file is sourced by all Bash *login* shells on startup.
################################################################################

{{- /* Check the commented content of the result of `chezmoi diff` */}}
{{-    $debug := false }}

{{- /*
     * Compute or set default values for this file. Add yours here.
     * I just find nice to have them handy here and reference them later, and
     * setting them one per line feels more readable than a convoluted,
     * all-in-one dict definition (I tried).
     */}}

{{-    $defaults := dict }}
{{-    $_ := set $defaults "data" dict }}

{{-    if $debug }}
{{       "defaults:" | comment "# " }}
{{       $defaults | toYaml | indent 4 | comment "# " }}
{{-    end }}

{{- /*
     * Start from the defaults and overwrite them with the existing
     * configuration from the configuration file.
     */}}

{{-    $config := $defaults }}

{{-    $configFromFile := include $.chezmoi.configFile | fromYaml }}
{{-    $_ := mustMergeOverwrite $config $configFromFile }}

{{-    if $debug }}
{{       "merged with config file" | comment "# " }}
{{       "config:" | comment "# " }}
{{       $config | toYaml | indent 4 | comment "# " }}
{{-    end }}

# Debug.
# echo "${BASH_SOURCE} is being sourced."

# Load the user's interactive settings.
# This lines are recommended by the Bash info pages.
: "${BASHRC=$HOME/.bashrc}"
if [[ -r "$BASHRC" ]]
then
	source "$BASHRC"
fi


{{- /*
     * Host-specific additions and overrides.
     * --------------------------------------
     */}}


{{- /*
     * Load pieces of configuration from hosts-specific configuration files,
     * should any such file exist.
     * Every file's content will be templated, and the result will be added,
     * in the order each appears in the list.
     */}}

{{-    $hostBashProfileFiles := list
         (joinPath $config.data.hostDir ".bash_profile.tmpl")
         (joinPath $config.data.hostDir ".bash_profile") }}

{{-    range $f := $hostBashProfileFiles }}

{{-      if $debug }}
{{         cat "looping on file" $f | comment "# " }}
{{-      end }}

{{-      if stat (joinPath $.chezmoi.sourceDir $f) }}

{{         includeTemplate $f . }}

{{-      end }}

{{-    end }}

{{- /*
     * It is useless to hash the default file's names, as this method is not
     * a real encryption and doing it just makes identifying the right file
     * more difficult. Just add your file path to this list eventually.
     */}}

{{-    $hostEncryptedBashProfileFiles := list
         (joinPath $config.data.encryptedHostDir (print ".bash_profile.tmpl" (dig "age" "suffix" ".age" $config)))
         (joinPath $config.data.encryptedHostDir (print ".bash_profile.tmpl" (dig "gpg" "suffix" ".asc" $config)))
         (joinPath $config.data.encryptedHostDir (print ".bash_profile" (dig "age" "suffix" ".age" $config)))
         (joinPath $config.data.encryptedHostDir (print ".bash_profile" (dig "gpg" "suffix" ".asc" $config))) }}

{{-    range $f := $hostEncryptedBashProfileFiles }}

{{-      if $debug }}
{{         cat "looping on file" $f | comment "# " }}
{{-      end }}

{{-      if stat (joinPath $.chezmoi.sourceDir $f) }}

{{- /*
     *     For chezmoi to be able to decrypt any encrypted file which content
     *     needs to be loaded, it requires the 'encryption' setting to be
     *     present in the configuration file _before_ the run.
     */}}

{{-        if hasKey $config "encryption" }}

{{           includeTemplate $f . | decrypt }}

{{-        end }}

{{-      end }}

{{-    end }}
