################################################################################
## ~/.zshenv
##
## This file is sourced by *all* zsh shells on startup.
################################################################################

{{- /* Check the commented content of the result of `chezmoi diff` */}}
{{-    $debug := false }}

{{- /*
     * Compute or set default values for this file. Add yours here.
     * I just find nice to have them handy here and reference them later, and
     * setting them one per line feels more readable than a convoluted,
     * all-in-one dict definition (I tried).
     */}}

{{-    $defaults := dict }}
{{-    $_ := set $defaults "data" dict }}

{{-    if $debug }}
{{       "defaults:" | comment "# " }}
{{       $defaults | toYaml | indent 4 | comment "# " }}
{{-    end }}

{{- /*
     * Start from the defaults and overwrite them with the existing
     * configuration from the configuration file.
     */}}

{{-    $config := $defaults }}

{{-    $configFromFile := include $.chezmoi.configFile | fromYaml }}
{{-    $_ := mustMergeOverwrite $config $configFromFile }}

{{-    if $debug }}
{{       "merged with config file" | comment "# " }}
{{       "config:" | comment "# " }}
{{       $config | toYaml | indent 4 | comment "# " }}
{{-    end }}

########################################
# Basic utility aliases and functions.
#
# Used to simplify checks later.
# Needed in all shells.
# Ordered alphabetically and by dependencies.
########################################

alias disable-xtrace='unsetopt xtrace'
alias enable-xtrace='setopt xtrace'
alias is-shell-interactive='[[ -o interactive ]]'
alias is-shell-login='[[ -o login ]]'

# Print the whole current environment.
alias printallenv='setopt posixbuiltins && set'

to-lower () {
	echo "${1:l}"
}

to-upper () {
	echo "${1:u}"
}

is-true () {
	# Needs to return 0 or 1 and not `true` or `false`.
	# Input's case is lowered to save on match options.

	local LOWERED_INPUT="$(to-lower "$1")"
	[[ "$LOWERED_INPUT" =~ '^1|on|true|yes$' ]]
}

path-add () {
	is-true "$DEBUG" && enable-xtrace

	local APPEND="${APPEND:-0}"
	local PREPEND="${PREPEND:-1}"

	if is-true "$APPEND"
	then
		path-append $@
	fi

	if is-true "$PREPEND"
	then
		path-prepend $@
	fi

	local RETURN_VALUE=$?
	is-true "$DEBUG" && disable-xtrace
	return $RETURN_VALUE
}

path-append () {
	# Add the absolute paths the input entries refer to.
	# Different loops to make it fail before adding the first entry. This avoids
	# leaving the variable in an inconsistent state.

	is-true "$DEBUG" && enable-xtrace

	for ENTRY in $@
	do
		if [[ ! -d "$ENTRY" ]]
		then
			echo "error: $ENTRY does not exist" >&2
			return 1
		fi
	done

	path=(
		${path[@]}
		$@
	)

	local RETURN_VALUE=$?
	is-true "$DEBUG" && disable-xtrace
	return $RETURN_VALUE
}

path-prepend () {
	# Add the absolute paths the input entries refer to.
	# Different loops to make it fail before adding the first entry. This avoids
	# leaving the variable in an inconsistent state.

	is-true "$DEBUG" && enable-xtrace

	for ENTRY in $@
	do
		if [[ ! -d "$ENTRY" ]]
		then
			echo "error: $ENTRY does not exist" >&2
			return 1
		fi
	done

	path=(
		$@
		${path[@]}
	)

	local RETURN_VALUE=$?
	is-true "$DEBUG" && disable-xtrace
	return $RETURN_VALUE
}

path-remove-broken () {}

########################################
# Pre-flight operations.
########################################

# Make PATHs' entries unique for better performances.
typeset -aU {f,info,man,}path

# Ensure PATH contains common binary directories.
# Prefer user's and local paths.
{{-    $paths := list
           (joinPath (env "HOME") "bin")
           (joinPath (env "HOME") ".bin")
           (joinPath (env "HOME") ".local" "bin")
           "/usr/local/sbin"
           "/usr/local/bin"
           "/usr/sbin"
           "/usr/bin"
           "/sbin"
           "/bin" }}
{{-    range $p := $paths | compact | uniq }}
{{-      if stat $p }}
{{-        $paths = append $paths (quote $p) }}
{{-      end }}
{{-      $paths = without $paths $p }}
{{-    end }}
path-prepend {{ $paths | join " " }}

########################################
# Shell configuration.
#
# https://zsh.sourceforge.io/Doc/Release/Options.html
########################################

# Require 'cd' to change directory.
unsetopt auto_cd

########################################
# Utility aliases and functions.
#
# Ordered and grouped by dependencies.
########################################

alias decomment='grep -Ev "^#|^$"'

{{-    if lookPath "sudo" }}

alias please='sudo'

{{-    end }}

swap () {
	is-true "$DEBUG" && enable-xtrace

	if [[ ! $# -eq 2 ]]
	then
		echo "Usage: $0 file1 file2"
		echo "Example: $0 /etc/resolv.conf resolv.new"
		return 1
	fi

	local TMPFILE="tmp.$$"
	mv "$1" "$TMPFILE"
	mv "$2" "$1"
	mv "$TMPFILE" "$2"

	local RETURN_VALUE=$?
	is-true "$DEBUG" && disable-xtrace
	return $RETURN_VALUE
}

########################################
# Applications' settings and shortcuts.
########################################

# Enable the recording of system upgrade routines for ease of use.
typeset -aU UPGRADE_ROUTINES

{{-    if (lookPath "brew") }}

####################
# Homebrew.
####################

{{       includeTemplate "homebrew.env" . -}}

{{-    end }}

{{-    if (lookPath "port") }}

{{       includeTemplate "macports.env" . -}}

{{-    end }}

{{-    if or
         (lookPath "python")
         (lookPath "python2")
         (lookPath "python3") }}

{{       includeTemplate "python.env" . -}}

{{-    end }}

{{- /* Host-specific additions and overrides. */}}

{{- /*
     * Load pieces of configuration from hosts-specific configuration files,
     * should any such file exist.
     * Every file's content will be templated, and the result will be added,
     * in the order each appears in the list.
     */}}

{{-    $hostZshenvFiles := list
         (joinPath $config.data.hostDir ".zshenv.tmpl")
         (joinPath $config.data.hostDir ".zshenv") }}

{{-    range $f := $hostZshenvFiles }}

{{-      if $debug }}
{{         cat "looping on file" $f | comment "# " }}
{{-      end }}

{{-      if stat (joinPath $.chezmoi.sourceDir $f) }}

{{         includeTemplate $f . }}

{{-      end }}

{{-    end }}

{{- /*
     * It is useless to hash the default file's names, as this method is not
     * a real encryption and doing it just makes identifying the right file
     * more difficult. Just add your file path to this list eventually.
     */}}

{{-    $hostEncryptedZshenvFiles := list
         (joinPath $config.data.encryptedHostDir (print ".zshenv.tmpl" (dig "age" "suffix" ".age" $config)))
         (joinPath $config.data.encryptedHostDir (print ".zshenv.tmpl" (dig "gpg" "suffix" ".asc" $config)))
         (joinPath $config.data.encryptedHostDir (print ".zshenv" (dig "age" "suffix" ".age" $config)))
         (joinPath $config.data.encryptedHostDir (print ".zshenv" (dig "gpg" "suffix" ".asc" $config))) }}

{{-    range $f := $hostEncryptedZshenvFiles }}

{{-      if $debug }}
{{         cat "looping on file" $f | comment "# " }}
{{-      end }}

{{-      if stat (joinPath $.chezmoi.sourceDir $f) }}

{{- /*
     *     For chezmoi to be able to decrypt any encrypted file which content
     *     needs to be loaded, it requires the 'encryption' setting to be
     *     present in the configuration file _before_ the run.
     */}}

{{-        if hasKey $config "encryption" }}

{{           includeTemplate $f . | decrypt }}

{{-        end }}

{{-      end }}

{{-    end }}
