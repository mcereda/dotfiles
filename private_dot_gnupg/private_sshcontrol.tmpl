################################################################################
## ~/.gnupg/sshcontrol
##
## List of allowed ssh keys.
## Only keys present in this file are used in the SSH protocol.
## The ssh-add tool may add new entries to this file to enable them; you may
## also add them manually.
## Comment lines, like this one, as well as empty lines are ignored.  Lines do
## have a certain length limit but this is not serious limitation as the format
## of the entries is fixed and checked by gpg-agent. A non-comment line starts
## with optional white spaces, followed by the keygrip of the key given as 40
## hex digits, optionally followed by a caching TTL in seconds, and another
## optional field for arbitrary flags.
## Prepend the keygrip with an '!' mark to disable it.
################################################################################

{{- /* Check the commented content of the result of `chezmoi diff` */}}
{{-    $debug := false }}

{{- /*
     * Compute or set default values for this file. Add yours here.
     * I just find nice to have them handy here and reference them later, and
     * setting them one per line feels more readable than a convoluted,
     * all-in-one dict definition (I tried).
     */}}

{{-    $defaults := dict }}
{{-    $_ := set $defaults "data" dict }}
{{-    $_ := set $defaults.data "gnupgConfDir" ".gnupg" }}

{{-    if $debug }}
{{       "defaults:" | comment "# " }}
{{       $defaults | toYaml | indent 4 | comment "# " }}
{{-    end }}

{{- /*
     * Start from the defaults and overwrite them with the existing
     * configuration from the configuration file.
     */}}

{{-    $config := $defaults }}

{{-    $configFromFile := include $.chezmoi.configFile | fromYaml }}
{{-    $_ := mustMergeOverwrite $config $configFromFile }}

{{-    if $debug }}
{{       "merged with config file" | comment "# " }}
{{       "config:" | comment "# " }}
{{       $config | toYaml | indent 4 | comment "# " }}
{{-    end }}

B3D630677D14A452502A84FB09E5357BF54C3E04

# Ed25519 key added on: 2022-10-01 17:39:43
# Fingerprints:  MD5:e7:63:d2:0b:2a:37:14:08:5d:68:a1:65:c0:96:3e:7c
#                SHA256:jcLF1Ch8U3rLEUB1OGQBn3P4NN+a8YwOi0fp515yyJQ
AB46A2D9EB1E89E08BFECA93441435CA1C32E08A 0

{{- /*
     * Load pieces of configuration from hosts-specific configuration files,
     * should any such file exist.
     * Every file's content will be templated, and the result will be added,
     * in the order each appears in the list.
     */}}

{{-    $hostGnupgSshControlFiles := list
         (joinPath $config.data.hostDir $config.data.gnupgConfDir "sshcontrol.tmpl")
         (joinPath $config.data.hostDir $config.data.gnupgConfDir "sshcontrol") }}

{{-    range $f := $hostGnupgSshControlFiles }}

{{-      if $debug }}
{{         cat "looping on file" $f | comment "# " }}
{{-      end }}

{{-      if stat (joinPath $.chezmoi.sourceDir $f) }}
{{         includeTemplate $f }}
{{-      end }}

{{-    end }}

{{- /*
     * It is useless to hash the default file's names, as this method is not
     * a real encryption and doing it just makes identifying the right file
     * more difficult. Just add your file path to this list eventually.
     */}}

{{-    $hostEncryptedGnupgSshControlFiles := list
         (joinPath $config.data.encryptedHostDir $config.data.gnupgConfDir (print "sshcontrol.tmpl" (dig "age" "suffix" ".age" $config)))
         (joinPath $config.data.encryptedHostDir $config.data.gnupgConfDir (print "sshcontrol.tmpl" (dig "gpg" "suffix" ".asc" $config)))
         (joinPath $config.data.encryptedHostDir $config.data.gnupgConfDir (print "sshcontrol" (dig "age" "suffix" ".age" $config)))
         (joinPath $config.data.encryptedHostDir $config.data.gnupgConfDir (print "sshcontrol" (dig "gpg" "suffix" ".asc" $config))) }}

{{-    range $f := $hostEncryptedGnupgSshControlFiles }}

{{-      if $debug }}
{{         cat "looping on file" $f | comment "# " }}
{{-      end }}

{{-      if stat (joinPath $.chezmoi.sourceDir $f) }}

{{- /*
     *     For chezmoi to be able to decrypt any encrypted file which content
     *     needs to be loaded, it requires the 'encryption' setting to be
     *     present in the configuration file _before_ the run.
     */}}

{{-        if hasKey $config "encryption" }}
{{           includeTemplate $f | decrypt }}
{{-        end }}

{{-      end }}

{{-    end }}
