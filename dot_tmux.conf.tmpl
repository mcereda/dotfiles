################################################################################
## ~/.tmux.conf
################################################################################

{{- /* Check the commented content of the result of `chezmoi diff` */}}
{{-    $debug := false }}

{{- /*
     * Compute or set default values for this file. Add yours here.
     * I just find nice to have them handy here and reference them later, and
     * setting them one per line feels more readable than a convoluted,
     * all-in-one dict definition (I tried).
     */}}

{{-    $defaults := dict }}
{{-    $_ := set $defaults "data" dict }}

{{-    if $debug }}
{{       "defaults:" | comment "# " }}
{{       $defaults | toYaml | indent 4 | comment "# " }}
{{-    end }}

{{- /*
     * Start from the defaults and overwrite them with the existing
     * configuration from the configuration file.
     */}}

{{-    $config := $defaults }}

{{-    $configFromFile := include $.chezmoi.configFile | fromYaml }}
{{-    $_ := mustMergeOverwrite $config $configFromFile }}

{{-    if $debug }}
{{       "merged with config file" | comment "# " }}
{{       "config:" | comment "# " }}
{{       $config | toYaml | indent 4 | comment "# " }}
{{-    end }}

# Tmux behavior.
set -g history-limit 100000   # scrollback size
set -g mouse on               # enable mouse control (clickable windows, panes, resizable panes)
set -g xterm-keys on

# Tmux visuals.
set -g default-terminal "screen-256color"
set -g status-right '#H %Y-%m-%d %H:%M'

# Window visuals.
set -g renumber-windows on                 # renumber windows when one is closed
set -g set-titles on                       # set the terminal's title
set-window-option -g automatic-rename on   # rename a window to the current program
# set-window-option -g window-status-current-style 'bg=red dim'   # highlight the active window

# Activity monitor.
set -g monitor-activity on   # highlight a window's tab when it has activity
set -g visual-activity on    # notify of a window's activity in the status bar

{{- /* Host-specific additions and overrides. */}}

{{- /*
     * Load pieces of configuration from hosts-specific configuration files,
     * should any such file exist.
     * Every file's content will be templated, and the result will be added,
     * in the order each appears in the list.
     */}}

{{-    $hostTmuxConfFiles := list
         (joinPath $config.data.hostDir ".tmux.conf.tmpl")
         (joinPath $config.data.hostDir ".tmux.conf") }}

{{-    range $f := $hostTmuxConfFiles }}

{{-      if $debug }}
{{         cat "looping on file" $f | comment "# " }}
{{-      end }}

{{-      if stat (joinPath $.chezmoi.sourceDir $f) }}
{{         includeTemplate $f }}
{{-      end }}

{{-    end }}

{{- /*
     * It is useless to hash the default file's names, as this method is not
     * a real encryption and doing it just makes identifying the right file
     * more difficult. Just add your file path to this list eventually.
     */}}

{{-    $hostEncryptedTmuxConfFiles := list
         (joinPath $config.data.encryptedHostDir (print ".tmux.conf.tmpl" (dig "age" "suffix" ".age" $config)))
         (joinPath $config.data.encryptedHostDir (print ".tmux.conf.tmpl" (dig "gpg" "suffix" ".asc" $config)))
         (joinPath $config.data.encryptedHostDir (print ".tmux.conf" (dig "age" "suffix" ".age" $config)))
         (joinPath $config.data.encryptedHostDir (print ".tmux.conf" (dig "gpg" "suffix" ".asc" $config))) }}

{{-    range $f := $hostEncryptedTmuxConfFiles }}

{{-      if $debug }}
{{         cat "looping on file" $f | comment "# " }}
{{-      end }}

{{-      if stat (joinPath $.chezmoi.sourceDir $f) }}

{{- /*
     *     For chezmoi to be able to decrypt any encrypted file which content
     *     needs to be loaded, it requires the 'encryption' setting to be
     *     present in the configuration file _before_ the run.
     */}}

{{-        if hasKey $config "encryption" }}
{{           includeTemplate $f | decrypt }}
{{-        end }}

{{-      end }}

{{-    end }}
