################################################################################
## ~/.bashrc
##
## There are 3 different types of shells in Bash:
## - the login shell;
## - the interactive non-login shell;
## - the non-interactive non-login shell.
## Login shells read '/etc/profile', and only the first one found between
## '~/.bash_profile', '~/.bash_login' and '~/.profile' in this order.
## Interactive non-login shells read '/etc/bashrc' and '~/.bashrc'.
## Non-interactive non-login shells read the file which name is the value of the
## '$BASH_ENV' variable.
## In this setup, '~/.bash_profile' sources '~/.bashrc', which means that all
## changes made here will also take effect in a login shell.
##
## This file is sourced by all *interactive* Bash shells on startup, including
## some apparently interactive shells such as `scp` and `rcp` which can't
## tolerate any output.
## Make sure this doesn't display anything or bad things will happen!
##
## It is recommended to put language settings in '~/.bash_profile',
## '~/.bash_login' or '~/.profile' rather than here, as multilingual X sessions
## would not work properly if '$LANG' is overridden in every subshell.
##
## References:
## - https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html
################################################################################

{{- /* Check the commented content of the result of `chezmoi diff` */}}
{{-    $debug := false }}

{{- /*
     * Compute or set default values for this file. Add yours here.
     * I just find nice to have them handy here and reference them later, and
     * setting them one per line feels more readable than a convoluted,
     * all-in-one dict definition (I tried).
     */}}

{{-    $defaults := dict }}
{{-    $_ := set $defaults "data" dict }}

{{-    if $debug }}
{{       "defaults:" | comment "# " }}
{{       $defaults | toYaml | indent 4 | comment "# " }}
{{-    end }}

# Debug.
# echo "${BASH_SOURCE} is being sourced."

########################################
# Basic utility aliases and functions.
#
# Used to simplify checks later.
# Needed in all shells.
# Ordered alphabetically and by dependencies.
########################################

alias disable-xtrace='set +o xtrace'
alias enable-xtrace='set -o xtrace'

# Print the whole current environment.
alias printallenv='set -o posix && set'

is-symlink-broken () { [[ ! -e "$1" ]] ; }

is-shell-interactive () {
	# From Bash's manpage:
	#   '$PS1' is set and '$-' includes 'i' if the shell is interactive.

	[[ $- =~ i ]] || [[ -t 0 ]]
}

is-shell-login () {
	# From Bash's manpage:
	#   A login shell is one whose first character of argument zero is a '-', or
	#   one started with the '--login' option.

	[[ $0 =~ ^- ]] || [[ $(shopt login_shell | cut -f 2) == 'on' ]]
}

to-lower () {
{{- /* The shortened version is available since Bash 5. */}}
{{-    if lt (atoi (output "bash" "-c" "echo ${BASH_VERSION:0:1}" | trim)) 5 }}
	# Bash3 has no built-in means to convert case of a string, fallback to `tr`.
	echo "$(echo "$1" | tr '[:upper:]' '[:lower:]')"
{{-    else }}
	echo "${1,,}"
{{-    end }}
}

to-upper () {
{{- /* The shortened version is available since Bash 5. */}}
{{-    if lt (atoi (output "bash" "-c" "echo ${BASH_VERSION:0:1}" | trim)) 5 }}
	# Bash3 has no built-in means to convert case of a string, fallback to `tr`.
	echo "$(echo "$1" | tr '[:lower:]' '[:upper:]')"
{{-    else }}
	echo "${1^^}"
{{-    end }}
}

is-true () {
	# Needs to return 0 or 1 and not `true` or `false`.
	# Input's case is lowered to save on match options.

	local LOWERED_INPUT="$(to-lower "$1")"
	[[ "$LOWERED_INPUT" =~ ^1|on|true|yes$ ]]
}

path-add () {
	is-true "$DEBUG" && enable-xtrace

	local APPEND="${APPEND:-0}"
	local PREPEND="${PREPEND:-1}"

	if is-true "$APPEND"
	then
		path-append $@
	fi

	if is-true "$PREPEND"
	then
		path-prepend $@
	fi

	local RETURN_VALUE=$?
	is-true "$DEBUG" && disable-xtrace
	return $RETURN_VALUE
}

path-append () {
	# Add the absolute paths the input entries refer to.
	# Different loops to make it fail before adding the first entry. This avoids
	# leaving the variable in an inconsistent state.
	# Multiple entries need to be ordered from higher to lower priority due to
	# them being added at the end of PATH's value one by one.

	is-true "$DEBUG" && enable-xtrace

	for ENTRY in $@
	do
		if [[ ! -d "$ENTRY" ]]
		then
			echo "error: $ENTRY does not exist" >&2
			return 1
		fi
	done

	for ENTRY in $@
	do
		cd "$ENTRY"
		PATH="${PATH}:${PWD}"
		cd - > /dev/null
	done

	export PATH

	local RETURN_VALUE=$?
	is-true "$DEBUG" && disable-xtrace
	return $RETURN_VALUE
}

path-prepend () {
	# Add the absolute paths the input entries refer to.
	# Different loops to make it fail before adding the first entry. This avoids
	# leaving the variable in an inconsistent state.
	# Multiple entries need to be ordered from lower to higher priority due to
	# them being added at the beginning of PATH's value one by one.

	is-true "$DEBUG" && enable-xtrace

	for ENTRY in $@
	do
		if [[ ! -d "$ENTRY" ]]
		then
			echo "error: $ENTRY does not exist" >&2
			return 1
		fi
	done

	for ENTRY in $@
	do
		cd "$ENTRY"
		PATH="${PWD}:${PATH}"
		cd - > /dev/null
	done

	export PATH

	local RETURN_VALUE=$?
	is-true "$DEBUG" && disable-xtrace
	return $RETURN_VALUE
}

{{-    if and
         (lookPath "awk")
         (lookPath "paste")
         (lookPath "xargs") }}

path-remove-broken () {
	is-true "$DEBUG" && enable-xtrace

	PATH="$(\
		printf %s "$PATH" \
		| awk -vRS=: '$0' \
		| xargs -I {} bash -c "[[ -e {} ]] && echo {}" \
		| paste -s -d ':' \
	)"
	export PATH

	local RETURN_VALUE=$?
	is-true "$DEBUG" && disable-xtrace
	return $RETURN_VALUE
}

{{-    end }}

{{-    if and
         (lookPath "awk")
         (lookPath "paste") }}

path-remove-duplicates () {
	is-true "$DEBUG" && enable-xtrace

	PATH="$(\
		printf %s "$PATH" \
		| awk -vRS=: '!a[$0]++' \
		| paste -s -d ':' \
	)"
	export PATH

	local RETURN_VALUE=$?
	is-true "$DEBUG" && disable-xtrace
	return $RETURN_VALUE
}

{{-    end }}

swap () {
	is-true "$DEBUG" && enable-xtrace

	if [[ ! $# -eq 2 ]]
	then
		echo "Usage: $0 file1 file2"
		echo "Example: $0 /etc/resolv.conf resolv.new"
		return 1
	fi

	local TMPFILE="tmp.$$"
	mv "$1" "$TMPFILE"
	mv "$2" "$1"
	mv "$TMPFILE" "$2"

	local RETURN_VALUE=$?
	is-true "$DEBUG" && disable-xtrace
	return $RETURN_VALUE
}

########################################
# Pre-flight operations.
########################################

# Ensure PATH contains common binary directories.
# Prefer user's and local paths.
# Each entry will be prepended in the given order.
{{-    $paths := list
         "/bin"
         "/sbin"
         "/usr/bin"
         "/usr/sbin"
         "/usr/local/bin"
         "/usr/local/sbin"
         (joinPath (env "HOME") ".local" "bin")
         (joinPath (env "HOME") ".bin")
         (joinPath (env "HOME") "bin") }}
{{-    range $p := $paths | compact }}
{{-      if not (stat $p) }}
{{-        $paths = without $paths $p }}
{{-      end }}
{{-    end }}
path-prepend {{ $paths | join " " }}

# Clean up PATH
path-remove-duplicates
path-remove-broken

# If this is a non-interactive shell, do nothing else.
# There is no need to set anything past this point for scp and rcp, and it's
# important to refrain from outputting anything in those cases.
is-shell-interactive || return

########################################
# Shell configuration.
########################################

{{- /* This feature is available since Bash 4. */}}
{{-    if ge (atoi (output "bash" "-c" "echo ${BASH_VERSION:0:1}" | trim)) 4 }}

# List the status of any stopped and running jobs before exiting an interactive
# shell. If any jobs are running, defer exiting until a second exit is attempted
# without an intervening command, and always postpone exiting if any jobs are
# stopped.
shopt -s checkjobs

{{-    end }}

# Check the window size of the current terminal window after each command.
# If necessary, update the values of the LINES and COLUMNS variables.
shopt -s checkwinsize

# If Readline is being used, do not attempt to search PATH for possible
# completions when the line is empty and wait a long time for this.
shopt -s no_empty_cmd_completion

# Add "/" to links to directories in autocompletion.
set mark-symlinked-directories on

####################
# History management.
####################

# Erase duplicates and ignore lines starting with spaces.
HISTCONTROL="ignorespace:erasedups"

# Number of lines or commands allowed in the history file.
HISTFILESIZE=100000

# Number of lines or commands stored in memory as the history of the current
# session.
HISTSIZE=50000

# Format how the history's entries are stored.
HISTTIMEFORMAT="%Y-%m-%d %T  "

# Attempt to save all lines of a multi-line command in the same history entry.
# This allows easy re-editing of such commands.
shopt -s cmdhist

# Append the history entries in memory to the HISTFILE when exiting the shell,
# rather than just overwriting the file.
shopt -s histappend

# If readline is being used, load the results of history substitution into the
# editing buffer, allowing further modification before execution.
shopt -s histverify

########################################
# Utility aliases and functions.
#
# Ordered and grouped by dependencies.
########################################

alias redo='$(history -p !!)'
alias uncomment='grep -Ev "^#|^$"'

{{-    if lookPath "notify-send" }}

alias alert='\
	notify-send --urgency=low -i \
	"$( [ $? = 0 ] && echo terminal || echo error >&2 )" \
	"$( \
		history \
			| tail -n1 \
			| sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'' \
		)"'

{{-    end }}

{{-    if lookPath "sudo" }}

alias please='sudo'
alias sedo='sudo redo'

{{-    end }}

ask-for-confirmation () {
	is-true "$DEBUG" && enable-xtrace

	read -p 'Continue? ' REPLY

	if ! is-true "$REPLY"
	then
		echo "aborting"
		return 1
	fi

	local RETURN_VALUE=$?
	is-true "$DEBUG" && disable-xtrace
	return $RETURN_VALUE
}

{{-    if and
         (lookPath "lynx")
         (lookPath "pandoc") }}

# Show a rendered markdown file.
alias mdv='markdown-view'
markdown-view () {
	is-true "$DEBUG" && enable-xtrace

	if [[ $# -lt 1 ]]
	then
		echo "error: no input files given" >&2
		echo "usage: $0 FILE..."
		return 1
	fi

	pandoc $@ | lynx -stdin

	local RETURN_VALUE=$?
	is-true "$DEBUG" && disable-xtrace
	return $RETURN_VALUE
}

{{-    end }}

####################
# Table flipping.
#
# https://cutekaomoji.com/misc/table-flipping/
####################

table_flips=(
	'(╯°□°）╯︵ ┻━┻'
	'(┛◉Д◉)┛彡┻━┻'
	'(ﾉ≧∇≦)ﾉ ﾐ ┸━┸'
	'(ノಠ益ಠ)ノ彡┻━┻'
	'(╯ರ ~ ರ）╯︵ ┻━┻'
	'(┛ಸ_ಸ)┛彡┻━┻'
	'(ﾉ´･ω･)ﾉ ﾐ ┸━┸'
	'(ノಥ,_｣ಥ)ノ彡┻━┻'
	'(┛✧Д✧))┛彡┻━┻'
	'┻━┻ ︵ヽ(`Д´)ﾉ︵ ┻━┻'
	'┻━┻ ︵ ¯\(ツ)/¯ ︵ ┻━┻'
	'(ノTДT)ノ ┫:･’.::･┻┻:･’.::･'
	'(ノ｀⌒´)ノ ┫：・’.：：・┻┻：・’.：：・'
	'(ﾉ*｀▽´*)ﾉ ⌒┫ ┻ ┣ ┳'
	'┻━┻ミ＼(≧ﾛ≦＼)'
	'┻━┻︵└(՞▃՞ └)'
	'┻━┻︵└(´▃｀└)'
	'─=≡Σ((((╯°□°）╯︵ ┻━┻'
	'(ノ｀´)ノ ~┻━┻'
	'(-_- )ﾉ⌒┫ ┻ ┣'
	'(ノ￣皿￣）ノ ⌒=== ┫'
	'ノ｀⌒´)ノ ┫：・’.：：・┻┻'
	'༼ﾉຈل͜ຈ༽ﾉ︵┻━┻'
	'ヽ༼ຈل͜ຈ༽ﾉ⌒┫ ┻ ┣'
	'ﾐ┻┻(ﾉ>｡<)ﾉ'
	'.::･┻┻☆()ﾟOﾟ)'
	'(ノʘ言ʘ)ﾉ ⌒┫ ┻ ┣ ┳☆(>｡☆)'
	'(ノ｀m´)ノ ~┻━┻ (/o＼)'
	'(ﾉ≧∇≦)ﾉ ﾐ ┸┸)`νﾟ)･;’.'
	'ミ(ノ￣^￣)ノ≡≡≡≡≡━┳━☆()￣□￣)/'
)

table_sets=(
	'┣ﾍ(^▽^ﾍ)Ξ(ﾟ▽ﾟ*)ﾉ┳━┳'
	'┬──┬ ノ( ゜-゜ノ)'
	'┬──┬ ¯\_(ツ)'
	'(ヘ･_･)ヘ┳━┳'
	'ヘ(´° □°)ヘ┳━┳'
	'┣ﾍ(≧∇≦ﾍ)… (≧∇≦)/┳━┳'
	'(つ ์ 𓎟 ์ )つ┳━┳'
	'(੭່˙ ์•͈ ▿ •͈ ์ )੭່˙┬──┬'
)

alias table-flip-random='shuf -e "${table_flips[@]}" | head -n 1'
alias table-set-random='shuf -e "${table_sets[@]}" | head -n 1'

alias flip-table="echo '(╯°□°)╯︵ ┻━┻'"
alias look-of-disapproval="echo 'ಠ_ಠ'"
alias middle-finger="echo 't(-.-t)'"
alias shrug="echo '¯\_(ツ)_/¯'"
alias y-u-no="echo 'ლ(ಠ益ಠლ)'"

########################################
# Applications settings and shortcuts.
########################################

{{-    $editor := coalesce
         (dig "editor" "" .)
         (lookPath "vim")
         (lookPath "vim.tiny")
         (lookPath "nano")
         (lookPath "vi")
         (env "EDITOR") }}
{{-    if $editor }}

# Set the default editor.
export EDITOR={{ $editor | quote }}

{{-    end }}

# Enable the recording of system upgrade routines for ease of use.
if [[ -z "${UPGRADE_ROUTINES[@]}" ]]
then
	UPGRADE_ROUTINES=()
fi

{{-    if (lookPath "brew") }}

{{       includeTemplate "homebrew.env" . }}
{{       includeTemplate "homebrew.sh" . }}

{{-    end }}

{{-    if (lookPath "port") }}

{{       includeTemplate "macports.env" . -}}

{{-    end }}

{{-    if or
         (lookPath "python")
         (lookPath "python2")
         (lookPath "python3") }}

{{       includeTemplate "python.env" . }}
{{       includeTemplate "python.sh" . }}

{{-    end }}

{{- /* Host-specific additions and overrides. */}}

{{- /*
     * Start from the defaults and overwrite them with the existing
     * configuration from the configuration file.
     */}}

{{-    $config := $defaults }}

{{-    $configFromFile := include $.chezmoi.configFile | fromYaml }}
{{-    $_ := mustMergeOverwrite $config $configFromFile }}

{{-    if $debug }}
{{       "merged with config file" | comment "# " }}
{{       "config:" | comment "# " }}
{{       $config | toYaml | indent 4 | comment "# " }}
{{-    end }}

{{- /*
     * Load pieces of configuration from hosts-specific configuration files,
     * should any such file exist.
     * Every file's content will be templated, and the result will be added,
     * in the order each appears in the list.
     */}}

{{-    $hostBashrcFiles := list
         (joinPath $config.data.hostDir ".bashrc.tmpl")
         (joinPath $config.data.hostDir ".bashrc") }}

{{-    range $f := $hostBashrcFiles }}

{{-      if $debug }}
{{         cat "looping on file" $f | comment "# " }}
{{-      end }}

{{-      if stat (joinPath $.chezmoi.sourceDir $f) }}

{{         includeTemplate $f . }}

{{-      end }}

{{-    end }}

{{- /*
     * It is useless to hash the default file's names, as this method is not
     * a real encryption and doing it just makes identifying the right file
     * more difficult. Just add your file path to this list eventually.
     */}}

{{-    $hostEncryptedBashrcFiles := list
         (joinPath $config.data.encryptedHostDir (print ".bashrc.tmpl" (dig "age" "suffix" ".age" $config)))
         (joinPath $config.data.encryptedHostDir (print ".bashrc.tmpl" (dig "gpg" "suffix" ".asc" $config)))
         (joinPath $config.data.encryptedHostDir (print ".bashrc" (dig "age" "suffix" ".age" $config)))
         (joinPath $config.data.encryptedHostDir (print ".bashrc" (dig "gpg" "suffix" ".asc" $config))) }}

{{-    range $f := $hostEncryptedBashrcFiles }}

{{-      if $debug }}
{{         cat "looping on file" $f | comment "# " }}
{{-      end }}

{{-      if stat (joinPath $.chezmoi.sourceDir $f) }}

{{- /*
     *     For chezmoi to be able to decrypt any encrypted file which content
     *     needs to be loaded, it requires the 'encryption' setting to be
     *     present in the configuration file _before_ the run.
     */}}

{{-        if hasKey $config "encryption" }}

{{           includeTemplate $f . | decrypt }}

{{-        end }}

{{-      end }}

{{-    end }}
