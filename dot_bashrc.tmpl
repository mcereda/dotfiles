################################################################################
## ~/.bashrc
##
## There are 3 different types of shells in Bash:
## - the login shell;
## - the interactive non-login shell;
## - the non-interactive non-login shell.
## Login shells read /etc/profile, and only the first one found between
## '~/.bash_profile', '~/.bash_login' and '~/.profile' in this order.
## Interactive non-login shells read '/etc/bashrc' and '~/.bashrc'.
## Non-interactive non-login shell read the file which name is the value of the
## '$BASH_ENV' variable.
## In this setup, '~/.bash_profile' sources '~/.bashrc', which means that all
## changes made here will also take effect in a login shell.
##
## This file is sourced by all *interactive* Bash shells on startup, including
## some apparently interactive shells such as `scp` and `rcp` which can't
## tolerate any output.
## Make sure this doesn't display anything or bad things will happen!
##
## It is recommended to put language settings in '~/.bash_profile',
## '~/.bash_login' or '~/.profile' rather than here, as multilingual X sessions
## would not work properly if '$LANG' is overridden in every subshell.
##
## References:
## - https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html
################################################################################

# Debug.
# echo "${BASH_SOURCE} is being sourced."

########################################
# Basic utility aliases and functions.
#
# Used to simplify checks later.
# Needed in non-interactive shells too.
########################################

alias disable-xtrace='set +o xtrace'
alias enable-xtrace='set -o xtrace'

# Print the whole current environment.
alias printallenv='set -o posix && set'

is-symlink-broken () { [[ ! -e "$1" ]] ; }

is-shell-interactive () {
	# From Bash's manpage:
	#   '$PS1' is set and '$-' includes 'i' if the shell is interactive.

	[[ $- =~ i ]] || [[ -t 0 ]]
}

is-shell-login () {
	# From Bash's manpage:
	#   A login shell is one whose first character of argument zero is a '-', or
	#   one started with the '--login' option.

	[[ $0 =~ ^- ]] || [[ $(shopt login_shell | cut -f 2) == 'on' ]]
}

is-true () {
	# Needs to return 0 or 1 and not `true` or `false`.
	# Input's case is lowered to save on match options.

	local LOWERED_INPUT="$(to-lower "$1")"
	[[ "$LOWERED_INPUT" =~ ^1|on|true|yes$ ]]
}

path-add () {
	local APPEND="${APPEND:-0}"
	local PREPEND="${PREPEND:-1}"

	if is-true "$APPEND"
	then
		path-append "$1"
	fi

	if is-true "$PREPEND"
	then
		path-prepend "$1"
	fi
}

path-append () {
	# Add the absolute path the input refers to.

	if [[ ! -d "$1" ]]
	then
		echo "error: $1 does not exist" >&2
		return 1
	fi

	cd "$1"
	PATH="${PATH}:${PWD}"
	cd - > /dev/null

	export PATH
}

path-prepend () {
	# Add the absolute path the input refers to.

	if [[ ! -d "$1" ]]
	then
		echo "error: $1 does not exist" >&2
		return 1
	fi

	cd "$1"
	PATH="${PWD}:${PATH}"
	cd - > /dev/null

	export PATH
}

path-remove-broken () {
	PATH="$(\
		printf %s "$PATH" \
		| awk -vRS=: '$0' \
		| xargs -I {} bash -c "[[ -e {} ]] && echo {}" \
		| paste -s -d ':' \
	)"
	export PATH
}

path-remove-duplicates () {
	PATH="$(\
		printf %s "$PATH" \
		| awk -vRS=: '!a[$0]++' \
		| paste -s -d ':' \
	)"
	export PATH
}

to-lower () {
{{- /* The shortened version is available since Bash 5. */}}
{{-    if lt (atoi (output "bash" "-c" "echo ${BASH_VERSION:0:1}" | trim)) 5 }}
	# Bash3 has no built-in means to convert case of a string, fallback to `tr`.
	echo "$(echo "$1" | tr '[:upper:]' '[:lower:]')"
{{-    else }}
	echo "${1,,}"
{{-    end }}
}

########################################
# Pre-flight operations.
########################################

# Add common paths to PATH.
# Entries needs to be from the lower to the higher priority due to them being
# added at the beginning of PATH's value one by one.
{{-    $paths := list
		 "/bin"
		 "/sbin"
         "/usr/bin"
		 "/usr/sbin"
         "/usr/local/bin"
		 "/usr/local/sbin"
         (joinPath (env "HOME") ".local" "bin")
         (joinPath (env "HOME") ".bin")
         (joinPath (env "HOME") "bin") }}
{{-    range $d := $paths | compact }}
{{-      if stat $d }}
path-add {{ $d | quote }}
{{-      end }}
{{-    end }}

# Clean up PATH
path-remove-duplicates
path-remove-broken

# If this is a non-interactive shell, do nothing else.
# There is no need to set anything past this point for scp and rcp, and it's
# important to refrain from outputting anything in those cases.
is-shell-interactive || return

########################################
# Shell configuration.
########################################

{{- /* This feature is available since Bash 4. */}}
{{-    if ge (atoi (output "bash" "-c" "echo ${BASH_VERSION:0:1}" | trim)) 4 }}

# List the status of any stopped and running jobs before exiting an interactive
# shell. If any jobs are running, defer exiting until a second exit is attempted
# without an intervening command, and always postpone exiting if any jobs are
# stopped.
shopt -s checkjobs

{{-    end }}

# Check the window size of the current terminal window after each command.
# If necessary, update the values of the LINES and COLUMNS variables.
shopt -s checkwinsize

# If Readline is being used, do not attempt to search PATH for possible
# completions when the line is empty and wait a long time for this.
shopt -s no_empty_cmd_completion

# Add "/" to links to directories in autocompletion.
set mark-symlinked-directories on

####################
# History management.
####################

# Erase duplicates and ignore lines starting with spaces.
HISTCONTROL="ignorespace:erasedups"

# Number of lines or commands allowed in the history file.
HISTFILESIZE=100000

# Number of lines or commands stored in memory as the history of the current
# session.
HISTSIZE=50000

# Format how the history's entries are stored.
HISTTIMEFORMAT="%Y-%m-%d %T  "

# Attempt to save all lines of a multi-line command in the same history entry.
# This allows easy re-editing of such commands.
shopt -s cmdhist

# Append the history entries in memory to the HISTFILE when exiting the shell,
# rather than just overwriting the file.
shopt -s histappend

# If readline is being used, load the results of history substitution into the
# editing buffer, allowing further modification before execution.
shopt -s histverify

########################################
# Utility aliases and functions.
#
# Ordered and grouped by dependencies.
########################################

alias redo='$(history -p !!)'
alias uncomment='grep -Ev "^#|^$"'

{{-    if lookPath "notify-send" }}

alias alert='\
	notify-send --urgency=low -i \
	"$( [ $? = 0 ] && echo terminal || echo error >&2 )" \
	"$( \
		history \
			| tail -n1 \
			| sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'' \
		)"'

{{-    end }}

{{-    if lookPath "sudo" }}

alias please='sudo'
alias sedo='sudo redo'

{{-    end }}

ask-for-confirmation () {
	is-true "$DEBUG" && enable-xtrace

	read -p 'Continue? ' REPLY

	if ! is-true "$REPLY"
	then
		echo "aborting"
		return 1
	fi

	local RETURN_VALUE=$?
	is-true "$DEBUG" && disable-xtrace
	return $RETURN_VALUE
}
