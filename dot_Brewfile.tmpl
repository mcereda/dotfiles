################################################################################
## ./Brewfile or ~/.Brewfile
##
## If ~/.Brewfile, used as global file for homebrew.
## Gotchas:
## - installing from the API is the default behaviour from a while now; no need
##   to use the 'homebrew/core' and 'homebrew/cask' taps anymore
## - `moreutils` installs its own old version of parallel, which conflicts with
##   the `parallel` formula; install `gettext`, `parallel` and `sponge` instead
##
## Sources:
## - https://github.com/Homebrew/homebrew-bundle
################################################################################

{{- /* Check the commented content of the result of `chezmoi diff` */}}
{{-    $debug := false }}

{{- /*
     * Compute or set default values for this file. Add yours here.
     * I just find nice to have them handy here and reference them later, and
     * setting them one per line feels more readable than a convoluted,
     * all-in-one dict definition (I tried).
     */}}

{{-    $defaults := dict }}
{{-    $_ := set $defaults "data" dict }}

{{-    if $debug }}
{{       "defaults:" | comment "# " }}
{{       $defaults | toYaml | indent 4 | comment "# " }}
{{-    end }}

{{- /*
     * Start from the defaults and overwrite them with the existing
     * configuration from the configuration file.
     */}}

{{-    $config := $defaults }}

{{-    $configFromFile := include $.chezmoi.configFile | fromYaml }}
{{-    $_ := mustMergeOverwrite $config $configFromFile }}

{{-    if $debug }}
{{       "merged with config file" | comment "# " }}
{{       "config:" | comment "# " }}
{{       $config | toYaml | indent 4 | comment "# " }}
{{-    end }}

tap "homebrew/bundle"

brew "bash" if OS.mac?
brew "chezmoi"
brew "coreutils"  # for `realpath`
brew "fzf"
brew "gettext"    # for `envsubst`
brew "git-lfs"
brew "git" if OS.mac?
brew "gnupg" if OS.mac?
brew "parallel"
brew "rsync" if OS.mac?
brew "sponge"
brew "tag" if OS.mac?
brew "tmux"
brew "tree"
brew "watch"

{{-    if lookPath "docker" }}
brew "hadolint"
{{-    end }}

{{-    if lookPath "git" }}
brew "commitlint"
brew "pre-commit"
{{-    end }}

{{-    if or (lookPath "python") (lookPath "python2") (lookPath "python3") }}
brew "pipx"
{{-    end }}


{{-    if eq $.chezmoi.os "darwin" }}

cask_args appdir: "~/Applications"

cask "monitorcontrol"  # for better control on external monitors
cask "mos"             # for separated mouse scrolling control
cask "rectangle"       # for window snapping

{{-    end }}


{{-    if lookPath "code" }}

vscode "angelo-breuer.clock"
vscode "EditorConfig.EditorConfig"
vscode "esbenp.prettier-vscode"
vscode "Gruntfuggly.todo-tree"
vscode "nhoizey.gremlins"
vscode "oderwat.indent-rainbow"
vscode "streetsidesoftware.code-spell-checker"
vscode "streetsidesoftware.code-spell-checker-british-english"

{{- /*   markdown */}}
vscode "bierner.markdown-mermaid"
vscode "ianjsikes.md-graph"
vscode "yzhang.markdown-all-in-one"

{{- /*   common files */}}
vscode "casualjim.gotemplate"
vscode "redhat.vscode-yaml"

{{-      if lookPath "ansible" }}
vscode "redhat.ansible"
{{-      end }}

{{-      if lookPath "az" }}
vscode "ms-azure-devops.azure-pipelines"
vscode "ms-vscode.azure-account"
vscode "ms-vscode.azurecli"
vscode "msazurermtools.azurerm-vscode-tools"
{{-        if lookPath "bicep" }}
vscode "ms-azuretools.vscode-bicep"
{{-        end }}
{{-      end }}

{{-      if lookPath "docker" }}
vscode "ms-azuretools.vscode-docker"
vscode "ms-vscode-remote.remote-containers"
{{-      end }}

{{-      if lookPath "git" }}
vscode "codezombiech.gitignore"
vscode "eamodio.gitlens"
{{-      end }}

{{-      if lookPath "go" }}
vscode "golang.go"
{{-      end }}

{{-      if lookPath "gpg" }}
vscode "JHeilingbrunner.vscode-gnupg-tool"
{{-      end }}

{{-      if lookPath "kubectl" }}
vscode "ms-kubernetes-tools.vscode-kubernetes-tools"
{{-        if lookPath "opa" }}
vscode "plex.vscode-regolint"
vscode "tsandall.opa"
{{-        end }}
{{-      end }}

{{-      if lookPath "make" }}
vscode "ms-vscode.makefile-tools"
{{-      end }}

{{-      if lookPath "pwsh" }}
vscode "ms-vscode.powershell"
{{-      end }}

{{-      if or (lookPath "python") (lookPath "python2") (lookPath "python3") }}
vscode "ms-python.python"
{{-      end }}

{{-      if lookPath "shellcheck" }}
vscode "timonwong.shellcheck"
{{-      end }}

{{-      if lookPath "ssh" }}
vscode "ms-vscode-remote.remote-ssh-edit"
{{-      end }}

{{-      if lookPath "terraform" }}
vscode "hashicorp.terraform"
{{-        if lookPath "az" }}
vscode "ms-azuretools.vscode-azureterraform"
{{-        end }}
{{-      end }}

{{-    end }}

{{- /*
     * Host-specific additions and overrides.
     * --------------------------------------
     */}}

{{- /*
     * Load pieces of configuration from hosts-specific configuration files,
     * should any such file exist.
     * Every file's content will be templated, and the result will be added,
     * in the order each appears in the list.
     */}}

{{-    $hostBrewfileFiles := list
         (joinPath $config.data.hostDir ".Brewfile.tmpl")
         (joinPath $config.data.hostDir ".Brewfile") }}

{{-    range $f := $hostBrewfileFiles }}

{{-      if $debug }}
{{         cat "looping on file" $f | comment "# " }}
{{-      end }}

{{-      if stat (joinPath $.chezmoi.sourceDir $f) }}

{{         includeTemplate $f . }}

{{-      end }}

{{-    end }}

{{- /*
     * It is useless to hash the default file's names, as this method is not
     * a real encryption and doing it just makes identifying the right file
     * more difficult. Just add your file path to this list eventually.
     */}}

{{-    $hostEncryptedBrewfileFiles := list
         (joinPath $config.data.encryptedHostDir (print ".Brewfile.tmpl" (dig "age" "suffix" ".age" $config)))
         (joinPath $config.data.encryptedHostDir (print ".Brewfile.tmpl" (dig "gpg" "suffix" ".asc" $config)))
         (joinPath $config.data.encryptedHostDir (print ".Brewfile" (dig "age" "suffix" ".age" $config)))
         (joinPath $config.data.encryptedHostDir (print ".Brewfile" (dig "gpg" "suffix" ".asc" $config))) }}

{{-    range $f := $hostEncryptedBrewfileFiles }}

{{-      if $debug }}
{{         cat "looping on file" $f | comment "# " }}
{{-      end }}

{{-      if stat (joinPath $.chezmoi.sourceDir $f) }}

{{- /*
     *     For chezmoi to be able to decrypt any encrypted file which content
     *     needs to be loaded, it requires the 'encryption' setting to be
     *     present in the configuration file _before_ the run.
     */}}

{{-        if hasKey $config "encryption" }}

{{           includeTemplate $f . | decrypt }}

{{-        end }}

{{-      end }}

{{-    end }}
