""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" ~/.vimrc
""
"" Sources:
"" - http://vimdoc.sourceforge.net/htmldoc/filetype.html
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

{{- /* Check the commented content of the result of `chezmoi diff` */}}
{{-    $debug := false }}

{{- /*
     * Compute or set default values for this file. Add yours here.
     * I just find nice to have them handy here and reference them later, and
     * setting them one per line feels more readable than a convoluted,
     * all-in-one dict definition (I tried).
     */}}

{{-    $defaults := dict }}
{{-    $_ := set $defaults "data" dict }}

{{-    if $debug }}
{{       "defaults:" | comment "\" " }}
{{       $defaults | toYaml | indent 4 | comment "\" " }}
{{-    end }}

{{- /*
     * Start from the defaults and overwrite them with the existing
     * configuration from the configuration file.
     */}}

{{-    $config := $defaults }}

{{-    $configFromFile := include $.chezmoi.configFile | fromYaml }}
{{-    $_ := mustMergeOverwrite $config $configFromFile }}

{{-    if $debug }}
{{       "merged with config file" | comment "\" " }}
{{       "config:" | comment "\" " }}
{{       $config | toYaml | indent 4 | comment "\" " }}
{{-    end }}

" Attempt to determine the type of a file based on its name and possibly its
" contents.
" Allow intelligent auto-indenting for each filetype, and for plugins that are
" filetype specific.
filetype indent plugin on

{{- /* Unavailable in vim.tiny */}}
{{-  if lookPath "vim" }}

" Enable syntax highlighting.
syntax on

{{- end }}

" Display line numbers on the left-hand side.
set number

" Highlight the line underneath the cursor.
set cursorline

" Highlight the column underneath the cursor.
" set cursorcolumn

" Highlight matching brackets.
set showmatch

" Show typed partial commands in the last line of the screen.
set showcmd

" Show the mode you are on the last line.
" set showmode

" Display the cursor position on the last line of the screen or in the status
" line of a window.
set ruler

" Use visual bell instead of beeping when doing something wrong.
set visualbell

" Raise a dialogue asking if you wish to save changed files instead of failing a
" command because of unsaved changes.
set confirm

" Do not redraw the screen during important tasks.
" Leads to smoother and faster macros.
set lazyredraw

{{-  if lookPath "fzf" }}

" Use FZF.
set rtp+={{ lookPath "fzf" }}

{{- end }}

""""""""""""""""""""""""""""""""""""""""
" Search.
""""""""""""""""""""""""""""""""""""""""

" Ignore capital letters during search.
set ignorecase

" Override the ignorecase option if searching for capital letters.
" This allows to search specifically for capital letters.
set smartcase

" Highlight during a search.
set hlsearch

" Highlight matching characters as you type while searching though a file
" incrementally.
set incsearch

" Show matching words during a search.
set showmatch

""""""""""""""""""""""""""""""""""""""""
" Indentation.
""""""""""""""""""""""""""""""""""""""""

" Copy indentation from the current line when starting a new line
set autoindent

" Adjust indentation on special events (e.g. after a bracket start)
set smartindent

" Insert spaces instead of a tab
set expandtab

" Draw a tab as 4 spaces
set tabstop=4

" Number of spaces to use for each (auto)indent step
set shiftwidth=4

" Number of spaces the cursor moves right when a Tab is inserted and moves left
" when Backspace is used to erase a tab.
" A negative value sets it to fall back to the value of 'shiftwidth'
set softtabstop=-1

" Overrides for shell files
" Use tabs for indentation instead of spaces
autocmd Filetype sh setlocal softtabstop=0 noexpandtab

""""""""""""""""""""""""""""""""""""""""
" Line wrap
""""""""""""""""""""""""""""""""""""""""

" Paint the background of the 81st character to draw a vertical indicator.
set colorcolumn=81

" Make it black in Graphical Vim.
" See :help gui-colors for a list of suggested color names.
" See :help guibg for how to specify specific rgb/hex colors.
highlight ColorColumn guibg=Black

" Make it dark grey in terminal vim.
" See :help cterm-colors for a list of colors that can be used in the terminal.
highlight ColorColumn ctermbg=DarkGrey


{{- /*
     * Host-specific additions and overrides.
     * --------------------------------------
     */}}


{{- /*
     * Load pieces of configuration from hosts-specific configuration files,
     * should any such file exist.
     * Every file's content will be templated, and the result will be added,
     * in the order each appears in the list.
     */}}

{{-    $hostVimrcFiles := list
         (joinPath $config.data.hostDir ".vimrc.tmpl")
         (joinPath $config.data.hostDir ".vimrc") }}

{{-    range $f := $hostVimrcFiles }}

{{-      if $debug }}
{{         cat "looping on file" $f | comment "\" " }}
{{-      end }}

{{-      if stat (joinPath $.chezmoi.sourceDir $f) }}

{{         includeTemplate $f . }}

{{-      end }}

{{-    end }}

{{- /*
     * It is useless to hash the default file's names, as this method is not
     * a real encryption and doing it just makes identifying the right file
     * more difficult. Just add your file path to this list eventually.
     */}}

{{-    $hostEncryptedVimrcFiles := list
         (joinPath $config.data.encryptedHostDir (print ".vimrc.tmpl" (dig "age" "suffix" ".age" $config)))
         (joinPath $config.data.encryptedHostDir (print ".vimrc.tmpl" (dig "gpg" "suffix" ".asc" $config)))
         (joinPath $config.data.encryptedHostDir (print ".vimrc" (dig "age" "suffix" ".age" $config)))
         (joinPath $config.data.encryptedHostDir (print ".vimrc" (dig "gpg" "suffix" ".asc" $config))) }}

{{-    range $f := $hostEncryptedVimrcFiles }}

{{-      if $debug }}
{{         cat "looping on file" $f | comment "\" " }}
{{-      end }}

{{-      if stat (joinPath $.chezmoi.sourceDir $f) }}

{{- /*
     *     For chezmoi to be able to decrypt any encrypted file which content
     *     needs to be loaded, it requires the 'encryption' setting to be
     *     present in the configuration file _before_ the run.
     */}}

{{-        if hasKey $config "encryption" }}

{{           includeTemplate $f . | decrypt }}

{{-        end }}

{{-      end }}

{{-    end }}
