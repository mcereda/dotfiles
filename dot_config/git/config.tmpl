{{- /* Print debug statements as commented contentin the file */}}
{{- $debug := false -}}

################################################################################
## ~/.config/git/config or ~/.gitconfig
##
## Global git configuration file. Settings in here override the system's ones,
## and are in turn overridden by the repositories' local ones.
## Check the resolved configuration in full and its origins with the following:
## `git config --list --show-origin`.
##
## Sources:
## - https://git-scm.com/docs/git-config
## - https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration
################################################################################

[alias]
	branch-get-default = "!f() { \
		git remote show origin \
		| awk '/HEAD branch/ {print $NF}' \
	;} && f"
	branch-get-gone = "!f() { \
		git fetch -p && \
		git branch -vv \
		| awk '/origin/&&/gone/{print $1}' \
	;} && f"
	branch-prune-gone = "!f() { \
		git branch-get-gone \
		| xargs \
			git branch -D \
	;} && f"
	checkout-default-branch = "!f() { \
		git checkout $(git branch-get-default) \
	;} && f"
	config-show-final = "!f() { \
		git config --list \
		| awk -F '=' '{print $1}' \
		| sort -u \
		| xargs -I {} \
			sh -c 'printf \"{}=\" && git config --get {}' \
	;} && f"
	diff-words = diff --color-words='[^[:space:]]|([[:alnum:]]|UTF_8_GUARD)+'
	pull-all = pull-from-all-remotes
	pull-from-all-remotes = "!f() { \
		git remote show \
		| xargs -I{} \
			git pull {} ${1:-$(git branch --show-current)} \
	;} && f"
	pull-from-reachable-remotes = "!f() { \
		git remote-show-reachable \
		| xargs -I{} \
			git pull {} ${1:-$(git branch --show-current)} \
	;} && f"
	pull-push = pull-push-reachable-remotes
	pull-push-reachable-remotes = "!f() { \
		git pull-from-reachable-remotes \
		&& git push-to-reachable-remotes \
	;} && f"
	pull-push-all-remotes = "!f() { \
		git pull-from-all-remotes \
		&& git push-to-all-remotes \
	;} && f"
	pull-reachable = pull-from-reachable-remotes
	push-all = push-to-all-remotes
	push-reachable = push-to-reachable-remotes
	push-to-all-remotes = "!f() { \
		git remote show \
		| xargs -I{} \
			git push {} ${1:-$(git branch --show-current)} \
	;} && f"
	push-to-reachable-remotes = "!f() { \
		git remote-show-reachable \
		| xargs -I{} \
			git push {} ${1:-$(git branch --show-current)} \
	;} && f"
	remote-show-reachable = "!f() { \
		git remote show \
		| xargs -I{} \
			sh -c \"timeout 3 git ls-remote -hq {} HEAD >/dev/null 2>&1 && echo {} || true\" \
	;} && f"
	remote-show-unique = "!f() { \
		git remote -v \
		| sort -k2 -u \
		| awk '{print $1}' \
		| sort -u \
	;} && f"
	statis = status
	statsu = status
	switch-default-branch = "!f() { \
		git switch $(git branch-get-default) \
	;} && f"
	top-level = "rev-parse --show-toplevel"

[branch "main"]
	remote = origin
[branch "master"]
	remote = origin

[diff]
	wsErrorHighlight = all

[init]
	defaultBranch = main

[pull]
	rebase = false

[submodule]
	recurse = true

[user]
	email = {{ .email }}
	name = {{ .name }}


{{- /*
     * Includes
     * --------
     */}}

{{- $includePaths := list
        (joinPath "~/.config/git" (join "." (list "config" (ternary "windows" "unix" (eq .chezmoi.os "windows")) "inc"))) }}

{{- if and
        (lookPath "git-lfs")
        (eq (output "git" "config" "--system" "--get" "--default" "NOT-SET" "filter.lfs.clean" | trim) "NOT-SET") }}
{{-     $includePaths = append $includePaths "~/.config/git/config.lfs.inc" }}
{{- end }}

[include]
{{- range $path := $includePaths }}
	path = {{ $path }}
{{- end }}


{{- /*
     * Host-specific additions and overrides.
     * --------------------------------------
     */}}


{{- /*
     * Load pieces of configuration from hosts-specific configuration files,
     * should any such file exist.
     * Every file's content will be templated, and the result will be added,
     * in the order each appears in the list.
     */}}

{{- $hostGitconfigFiles := list
        (joinPath .hostDir ".gitconfig.tmpl")
        (joinPath .hostDir ".gitconfig")
        (joinPath .hostDir ".config" "git" "config.tmpl")
        (joinPath .hostDir ".config" "git" "config") }}

{{- range $f := $hostGitconfigFiles }}
{{-     if $debug }}
{{          cat "looping on file" $f | comment "# " }}
{{-     end }}
{{-     if stat (joinPath $.chezmoi.sourceDir $f) }}
{{/*        newline */}}
{{          includeTemplate $f . }}
{{/*        newline */}}
{{-     end }}
{{- end }}


{{- /*
     * It is useless to hash the default file's names, as this method is not
     * a real encryption and doing it just makes identifying the right file
     * more difficult. Just add the file path to this list eventually.
     */}}

{{- $hostEncryptedGitconfigFiles := list
        (joinPath $.encryptedHostDir (print ".gitconfig.tmpl" (dig "age" "suffix" ".age" .)))
        (joinPath $.encryptedHostDir (print ".gitconfig.tmpl" (dig "gpg" "suffix" ".asc" .)))
        (joinPath $.encryptedHostDir (print ".gitconfig" (dig "age" "suffix" ".age" .)))
        (joinPath $.encryptedHostDir (print ".gitconfig" (dig "gpg" "suffix" ".asc" .)))
        (joinPath $.encryptedHostDir ".config" "git" (print "config.tmpl" (dig "age" "suffix" ".age" .)))
        (joinPath $.encryptedHostDir ".config" "git" (print "config.tmpl" (dig "gpg" "suffix" ".asc" .)))
        (joinPath $.encryptedHostDir ".config" "git" (print "config" (dig "age" "suffix" ".age" .)))
        (joinPath $.encryptedHostDir ".config" "git" (print "config" (dig "gpg" "suffix" ".asc" .))) }}

{{- range $f := $hostEncryptedGitconfigFiles }}
{{-     if $debug }}
{{          cat "looping on file" $f | comment "# " }}
{{-     end }}
{{-     if stat (joinPath $.chezmoi.sourceDir $f) }}

{{- /*
     *      For chezmoi to be able to decrypt any encrypted file which content
     *      needs to be loaded, it requires the 'encryption' setting to be
     *      present in the configuration file _before_ the run.
     */}}

{{-         if hasKey $.chezmoi.config "encryption" }}
{{/*            newline */}}
{{              includeTemplate $f . | decrypt }}
{{/*            newline */}}
{{-         end }}
{{-     end }}
{{- end -}}
