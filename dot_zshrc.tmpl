################################################################################
## ~/.zshrc
##
## This file is sourced by all *interactive* zsh shells on startup, including
## some apparently interactive shells such as scp and rcp that can't tolerate
## any output.
## Make sure this doesn't display anything or bad things will happen!
##
## It is recommended to make language settings in ~/.zprofile rather than here,
## since multilingual X sessions would not work properly if LANG is overridden
## in every subshell.
################################################################################

{{- /* Check the commented content of the result of `chezmoi diff` */}}
{{-    $debug := false }}

{{- /*
     * Compute or set default values for this file. Add yours here.
     * I just find nice to have them handy here and reference them later, and
     * setting them one per line feels more readable than a convoluted,
     * all-in-one dict definition (I tried).
     */}}

{{-    $defaults := dict }}
{{-    $_ := set $defaults "data" dict }}

{{-    if $debug }}
{{       "defaults:" | comment "# " }}
{{       $defaults | toYaml | indent 4 | comment "# " }}
{{-    end }}

{{- /*
     * Start from the defaults and overwrite them with the existing
     * configuration from the configuration file.
     */}}

{{-    $config := $defaults }}

{{-    $configFromFile := include $.chezmoi.configFile | fromYaml }}
{{-    $_ := mustMergeOverwrite $config $configFromFile }}

{{-    if $debug }}
{{       "merged with config file" | comment "# " }}
{{       "config:" | comment "# " }}
{{       $config | toYaml | indent 4 | comment "# " }}
{{-    end }}

# Enable this and the last line to debug performance.
# zmodload zsh/zprof

########################################
# Shell configuration.
# Sane defaults that could easily be overridden later.
########################################

# If a pattern for filename generation has no matches, print an error instead of
# leaving it unchanged in the argument list.
# This also applies to file expansion of an initial '~' or '='.
setopt no_match

# Remind compinstall where it wrote zstyle statements last time.
# This lets one run compinstall again to update them.
zstyle ':compinstall' filename ~/.zshrc

# Automatically update completions after PATH changes.
zstyle ':completion:*' rehash true

# Enable cache for completions.
zstyle ':completion:*' use-cache true

# Load extensions.
autoload -Uz bashcompinit compinit promptinit

# Enable completions.
bashcompinit
compinit

# Enable prompt management.
promptinit

####################
# History management.
####################

# The file to save the history into when an interactive shell exits.
# If unset, the history is not saved.
: "${HISTFILE:=$HOME/.zsh_history}"

# Set the number of lines or commands allowed in the history file
SAVEHIST=50000

# Set the number of lines or commands stored in memory as history list during an
# ongoing session
HISTSIZE=100000

# Append the session's history list to the history file, rather than replace it.
# Multiple parallel sessions will all have the new entries from their history
# lists added to the history file, in the order that they exit. The file will
# still be periodically re-written to trim it when the number of lines grows 20%
# beyond the value specified by $SAVEHIST
setopt append_history

# When searching for history entries in the line editor, do not display
# duplicates of a line previously found
# setopt hist_find_no_dups

# If a new command line being added to the history list duplicates an older one,
# the older command is removed from the list
setopt hist_ignore_all_dups

# Remove command lines from the history list when the first character on the
# line is a space, or when one of the expanded aliases contains a leading space.
# Only normal aliases (not global or suffix aliases) have this behavior. Note
# that the command lingers in the internal history until the next command is
# entered before it vanishes, allowing you to briefly reuse or edit the line.
# If you want to make it vanish right away without entering another command,
# type a space and press return
setopt hist_ignore_space

# Remove superfluous blanks from each command line being added to the history
setopt hist_reduce_blanks

# Omit older commands duplicating newer ones when writing out the history file
# setopts hist_save_no_dups

# Whenever the user enters a line with history expansion, perform history
# expansion and reload the line into the editing buffer instead of executing it
setopt hist_verify

########################################
# Utility aliases and functions.
#
# Ordered and grouped by dependencies.
########################################

ask-for-confirmation () {
	is-true "$DEBUG" && enable-xtrace

	local RETURN_VALUE=0

	if ! read -qs "REPLY?Continue (y/N)? "
	then
		echo 'Aborting' >&2
		RETURN_VALUE=1
	fi

	local RETURN_VALUE=$?
	is-true "$DEBUG" && disable-xtrace
	return $RETURN_VALUE
}

{{-    if lookPath "notify-send" }}

alias alert='\
	notify-send --urgency=low -i \
	"$( [ $? = 0 ] && echo terminal || echo error >&2 )" \
	"$( \
		history \
			| tail -n1 \
			| sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'' \
		)"'

{{-    end }}

####################
# History management.
####################

alias redo='$(history -p !!)'
alias sedo='sudo $(history -p !!)'

####################
# Table flip!
####################

{{     includeTemplate "table-flip.sh" . }}

########################################
# Applications settings and shortcuts.
########################################

{{-    $editor := coalesce
         (dig "editor" "" .)
         (lookPath "vim")
         (lookPath "vim.tiny")
         (lookPath "nano")
         (lookPath "vi")
         (env "EDITOR") }}
{{-    if $editor }}

# Set the default editor.
export EDITOR={{ $editor | quote }}

{{-    end }}

{{-    if eq $.chezmoi.os "darwin" }}

####################
# Darwin.
####################

{{       includeTemplate "darwin.sh" . }}

{{-    end }}

{{-    if eq $.chezmoi.os "linux" }}

####################
# Linux.
####################

{{       includeTemplate "linux.sh" . }}

{{-    end }}

{{-    if eq (dig "id" "" $.chezmoi.osRelease) "funtoo" }}

####################
# Funtoo.
####################

{{       includeTemplate "funtoo.sh" . }}

{{-    end }}

{{-    if lookPath "systemctl" }}

####################
# Systemd.
####################

{{       includeTemplate "systemd.sh" . }}

{{-    end }}

{{-    if and
         (eq $.chezmoi.os "linux")
         (lookPath "apt") }}

####################
# APT.
####################

{{       includeTemplate "apt.sh" . }}

{{-    end }}

{{-    if lookPath "dnf" }}

####################
# DNF.
####################

{{       includeTemplate "dnf.sh" . }}

{{-    end }}

{{-    if lookPath "brew" }}

####################
# Homebrew.
####################

{{       includeTemplate "homebrew.sh" . }}

{{-    end }}

{{-    if lookPath "port" }}

####################
# Macports.
####################

{{       includeTemplate "macports.sh" . }}

{{-    end }}

{{-    if lookPath "mas" }}

####################
# MAS.
####################

{{       includeTemplate "mas.sh" . }}

{{-    end }}

{{-    if lookPath "snap" }}

####################
# Snap.
####################

{{       includeTemplate "snap.sh" . }}

{{-    end }}

{{-    if lookPath "zypper" }}

####################
# Zypper.
####################

{{       includeTemplate "zypper.sh" . }}

{{-    end }}

{{-    if or
         (lookPath "python")
         (lookPath "python2")
         (lookPath "python3") }}

####################
# Python.
####################

{{       includeTemplate "python.sh" . }}

{{-    end }}

{{-    if lookPath "btrfs" }}

####################
# BTRFS.
####################

{{       includeTemplate "btrfs.sh" . }}

{{-    end }}

{{-    if lookPath "gpg" }}

####################
# GnuPG.
####################

{{       includeTemplate "gnupg.sh" . }}

{{-    end }}

{{-    if lookPath "kerberos" }}

####################
# Kerberos.
####################

{{       includeTemplate "kerberos.sh" . }}

{{-    end }}

{{-    if lookPath "ssh" }}

####################
# SSH.
####################

{{       includeTemplate "ssh.sh" . }}

{{-    end }}

{{-    if lookPath "az" }}

####################
# Azure CLI.
####################

{{       includeTemplate "azure-cli.sh" . }}

{{-    end }}

{{-    if lookPath "boinccmd" }}

####################
# BOINC.
####################

{{       includeTemplate "boinc.sh" . }}

{{-    end }}

{{-    if lookPath "citrix" }}

####################
# Citrix.
####################

{{       includeTemplate "citrix.sh" . }}

{{-    end }}

{{-    if lookPath "gcloud" }}

####################
# Google Cloud CLI.
####################

{{       includeTemplate "gcloud.sh" . }}

{{-    end }}

{{-    if lookPath "vault" }}

####################
# HashiCorp Vault.
####################

{{       includeTemplate "hashicorp-vault.zsh" . }}

{{-    end }}

{{-    if lookPath "kubectl" }}

####################
# Kubernetes.
####################

{{       includeTemplate "kubernetes.sh" . }}

{{-    end }}

{{-    if lookPath "minikube" }}

####################
# Minikube.
####################

{{       includeTemplate "minikube.sh" . }}

{{-    end }}

########################################
# Host-specific additions and overrides.
########################################

{{- /*
     * Load pieces of configuration from hosts-specific configuration files,
     * should any such file exist.
     * Every file's content will be templated, and the result will be added,
     * in the order each appears in the list.
     */}}

{{-    $hostZshrcFiles := list
         (joinPath $config.data.hostDir ".zshrc.tmpl")
         (joinPath $config.data.hostDir ".zshrc") }}

{{-    range $f := $hostZshrcFiles }}

{{-      if $debug }}
{{         cat "looping on file" $f | comment "# " }}
{{-      end }}

{{-      if stat (joinPath $.chezmoi.sourceDir $f) }}

{{         includeTemplate $f . }}

{{-      end }}

{{-    end }}

{{- /*
     * It is useless to hash the default file's names, as this method is not
     * a real encryption and doing it just makes identifying the right file
     * more difficult. Just add your file path to this list eventually.
     */}}

{{-    $hostEncryptedZshrcFiles := list
         (joinPath $config.data.encryptedHostDir (print ".zshrc.tmpl" (dig "age" "suffix" ".age" $config)))
         (joinPath $config.data.encryptedHostDir (print ".zshrc.tmpl" (dig "gpg" "suffix" ".asc" $config)))
         (joinPath $config.data.encryptedHostDir (print ".zshrc" (dig "age" "suffix" ".age" $config)))
         (joinPath $config.data.encryptedHostDir (print ".zshrc" (dig "gpg" "suffix" ".asc" $config))) }}

{{-    range $f := $hostEncryptedZshrcFiles }}

{{-      if $debug }}
{{         cat "looping on file" $f | comment "# " }}
{{-      end }}

{{-      if stat (joinPath $.chezmoi.sourceDir $f) }}

{{- /*
     *     For chezmoi to be able to decrypt any encrypted file which content
     *     needs to be loaded, it requires the 'encryption' setting to be
     *     present in the configuration file _before_ the run.
     */}}

{{-        if hasKey $config "encryption" }}

{{           includeTemplate $f . | decrypt }}

{{-        end }}

{{-      end }}

{{-    end }}

########################################
# Configuration freeze.
# Finalize customizations and try to set the current configuration immutable.
########################################

[[ -n "${UPGRADE_ROUTINES[@]}" ]] && alias upgrade-routine="${(j:; echo -e "\n---\n"; :)UPGRADE_ROUTINES}"

# Clean up PATHs.

# Remove non-existing directories, follow symlinks and clean up remaining paths.
if command which realpath >/dev/null 2>&1
then
{{-    if eq $.chezmoi.os "darwin" }}
	[[ -n "${fpath[@]}" ]]    && fpath=(    $(realpath -q ${fpath[@]})    )
	[[ -n "${infopath[@]}" ]] && infopath=( $(realpath -q ${infopath[@]}) )
	[[ -n "${manpath[@]}" ]]  && manpath=(  $(realpath -q ${manpath[@]})  )
	[[ -n "${path[@]}" ]]     && path=(     $(realpath -q ${path[@]})     )
{{-    else }}
	[[ -n "${fpath[@]}" ]]    && fpath=(    $(realpath --canonicalize-existing --no-symlinks --quiet ${fpath[@]})    )
	[[ -n "${infopath[@]}" ]] && infopath=( $(realpath --canonicalize-existing --no-symlinks --quiet ${infopath[@]}) )
	[[ -n "${manpath[@]}" ]]  && manpath=(  $(realpath --canonicalize-existing --no-symlinks --quiet ${manpath[@]})  )
	[[ -n "${path[@]}" ]]     && path=(     $(realpath --canonicalize-existing --no-symlinks --quiet ${path[@]})     )
{{-    end }}
fi

# Freeze (-f) or unfreeze (-u) the tty. When the tty is frozen, no changes made
# to the tty settings by external programs will be honored by the shell, except
# for changes in the size of the screen; the shell will simply reset the
# settings to their previous values as soon as each command exits or is
# suspended.
# Freezing the tty only causes future changes to the state to be blocked.
ttyctl -f

# Enable this and the module inclusion on the first line to debug performance.
# zprof
